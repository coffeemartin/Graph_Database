//01_Load_Beat
LOAD CSV WITH HEADERS FROM 'file:///graph_beat_dim.csv' AS row
MERGE (b:Beat{Beat:toInteger(row.beat),Beat_ID:toInteger(row.beat_ID)})
 MERGE (z:Zone {Zone:toInteger(row.zone)})
WITH b,z
MERGE (b) - [:in] -> (z)


//02_Load_Neighborhood
LOAD CSV WITH HEADERS FROM 'file:///graph_Nbh_dim.csv' AS row
MERGE (nb:Neighborhood {Neighborhood:row.neighborhood,Nbh_ID:toInteger(row.Nbh_ID),Population_2010:toInteger(row.Population)})
MERGE (np:Npu {Npu:row.npu})
MERGE (cty:County {County:row.county})
WITH nb,np,cty
MERGE (nb) - [:in] -> (np)
MERGE (np) - [:in] -> (cty)


//03_Load_Property_Type
LOAD CSV WITH HEADERS FROM 'file:///graph_Loc_type_dim.csv' AS row
MERGE (pt:Pro_Type {Property_Type:row.type,Loc_Type_ID:toInteger(row.Loc_type_ID) })


//04_Load_Crime_and_Relationships
LOAD CSV WITH HEADERS FROM 'file:///graph_final.csv' AS row
MATCH (b:Beat {Beat_ID: toInteger(row.beat_ID)}),
(n:Neighborhood { Nbh_ID: toInteger(row.Nbh_ID)}),
(l:Pro_Type { Loc_Type_ID: toInteger(row.Loc_type_ID)})
MERGE (c:Crime {Crime_ID:toInteger(row.number), Crime_Type:row.crime, Date:date(row.date), location:point({ latitude: toFloat(row.lat), longitude: toFloat(row.long)})})
WITH c,b,n,l,row
MERGE (c) - [:occured_in] -> (b)
MERGE (c) - [:location_type] -> (l)
MERGE (c) - [:occured_in] -> (n)


//05_Convert Crime Type to Labels
MATCH (n:Crime)
WITH DISTINCT n.Crime_Type AS crimetype, collect(n) AS crimes
CALL apoc.create.addLabels(crimes, [apoc.text.upperCamelCase(crimetype)]) YIELD node
RETURN *


//06_Query 1
MATCH (c:LarcenyFromVehicle) --> (nb:Neighborhood {Neighborhood:"Downtown"})
WHERE c.Date.month >= 10 and c.Date.year = 2010
WITH c, nb
ORDER BY c.Date
RETURN  nb.Neighborhood as Neighborhood, c.Date.year as Year, collect(distinct(c.Date.month)) as Months, count(c) as Total_Crimes


//07_Query_APOC_VERSION
MATCH (c1:Crime)-->(n1:Neighborhood)
WITH *
ORDER BY ID(c1)
WITH n1,apoc.coll.sort( collect(distinct c1.Crime_Type)) AS c1Crimes 
MATCH (c2:Crime)-->(n2:Neighborhood)
WHERE ID(n1) < ID(n2)
WITH *
ORDER BY ID(c2)
WITH n1, c1Crimes, n2, apoc.coll.sort(collect(distinct c2.Crime_Type)) AS c2Crimes
WHERE c1Crimes = c2Crimes
with collect(distinct n1.Neighborhood) as result1, collect(distinct n2.Neighborhood) as result2, c1Crimes
With result1 + result2 as finalresult, c1Crimes
RETURN SIZE(c1Crimes) as Count, apoc.coll.sort(c1Crimes) as Common_Crime_Types, apoc.coll.sort(apoc.coll.toSet(finalresult)) as
Neighborhoods_Share_Common_Crime_Types
ORDER BY Count DESC, Common_Crime_Types[0]



//08_Query 3
MATCH (c:RobberyCommercial|RobberyPedestrian|RobberyResidence) --> (nb:Neighborhood)
WHERE c.Date >= date("2010-02-23") and c.Date <= date("2010-09-01")
RETURN  nb.Neighborhood as Neighborhood, Count(c) as Total_of_Robbery_Crimes_Between_0223_to_0901_In_2010
ORDER BY Total_of_Robbery_Crimes_Between_0223_to_0901_In_2010 DESC
LIMIT 5

//09_Query 4
MATCH (c:Crime) --> (p:Pro_Type)
WITH c,p
ORDER BY p.Property_Type, c.Crime_Type
RETURN p.Property_Type as Property_Type, collect(distinct c.Crime_Type) as Crime_Types


//10_Query 5_Beat
MATCH (c:Crime) - [h:occured_in] -> (b:Beat)
WITH b.Beat as beat, c.Date.month as Month,  count(*) as result
ORDER BY beat, result DESC
WITH beat, COLLECT (Month) as monthlist, COLLECT (result) as resultlist, COLLECT(result)[0] as topcrime
WITH beat, monthlist, [x in resultlist WHERE x = topcrime |x] as newlist
WITH beat, monthlist , newlist, size(newlist) as topn
RETURN beat, monthlist[0..topn] as highest_crime_occurrence_month_in_2010, newlist[0] as highest_crime_count


//10_Query_5_Zone
MATCH (c:Crime) --> (b:Beat) --> (z:Zone)
WITH z.Zone as zone, c.Date.month as Month,  count(*) as result
ORDER BY zone, result DESC
WITH zone, COLLECT (Month) as monthlist, COLLECT (result) as resultlist, COLLECT(result)[0] as topcrime
WITH zone, monthlist, [x in resultlist WHERE x = topcrime |x] as newlist
WITH zone, monthlist , newlist, size(newlist) as topn
Return zone, monthlist[0..topn] as highest_crime_occurrence_month_in_2010, newlist[0] as highest_crime_count


//11_Create_Adjecent_Rel
LOAD CSV WITH HEADERS FROM 'file:///adjacent_zone.csv' AS row
MATCH (z:Zone {Zone: toInteger(row.zone)}),
(z1:Zone {Zone: toInteger(row.adjecent_zone)})
CREATE (z)-[:ADJECENT]->(z1)

//12_Create_Month_Nodes
LOAD CSV WITH HEADERS FROM 'file:///month.csv' AS row
CREATE (m:Month {
    Month_Number: toInteger(row.Month_Number),
    Name: row.Month_Name})

//12_Create_Month_Nodes
LOAD CSV WITH HEADERS FROM 'file:///month.csv' AS row
CREATE (m:Month {
    Month_Number: toInteger(row.Month_Number),
    Name: row.Month_Name})


//13_Query_6
MATCH (c:Crime) --> (b:Beat) --> (z:Zone)
WITH z.Zone as zone, c.Date.month as Month,  count(*) as result
ORDER BY zone, result DESC
WITH zone, COLLECT (Month) AS monthlist, COLLECT (result) AS resultlist, COLLECT(result)[0] AS topcrime
WITH zone, monthlist, [x IN resultlist WHERE x = topcrime |x] AS newlist
WITH zone, monthlist , newlist, size(newlist) AS topn
WITH zone, monthlist[0..topn] AS highest_crime_occurrence_month, newlist[0] AS highest_crime_count
UNWIND highest_crime_occurrence_month AS month
WITH  month,zone, highest_crime_count
MATCH (z:Zone{Zone:zone})
MATCH (m:Month{Month_Number:month})
CALL apoc.create.vRelationship(z, 'Highest_Crime_Month', {the_crime_count:highest_crime_count}, m) YIELD rel
WITH month, collect(zone) AS zones,collect (rel) AS rels
MATCH (z:Zone) -[a:ADJECENT] - (z1:Zone)
MATCH (m:Month{Month_Number:month})
WHERE z.Zone IN zones AND z1.Zone IN zones
RETURN startNode(a), endNode(a), m, rels



//14_Query_7
MATCH (c:Crime) - [h:occured_in] -> (b:Beat)
WITH b.Beat as beat, c.Date.month as Month,  count(*) as result
ORDER BY beat, result DESC
WITH beat, COLLECT (Month) as monthlist, COLLECT (result) as resultlist, COLLECT(result)[0] as topcrime
WITH beat, monthlist, [x in resultlist WHERE x = topcrime |x] as newlist
WITH beat, monthlist , newlist, size(newlist) as topn
WITH beat, monthlist[0..topn] as highest_crime_occurrence_month_in_2010, newlist[0] as highest_crime_count
UNWIND highest_crime_occurrence_month_in_2010 AS month
WITH  month,beat, highest_crime_count
MATCH (b:Beat{Beat:beat})
MATCH (m:Month{Month_Number:month})
CALL apoc.create.vRelationship(b, 'Highest_Crime_Month', {the_crime_count:highest_crime_count}, m) YIELD rel
RETURN b,m,rel


//15_Query_8
MATCH (n:AggAssault|RobberyPedestrian|RobberyResidence|Rape|RobberyCommercial|Homicide) - [:occured_in] -> (nbh:Neighborhood)
WHERE nbh.Population_2010 <> 0
WITH nbh, count(*) as crimes
RETURN nbh.Neighborhood as Neighborhood, crimes as Count_of_Crimes_in_2010, nbh.Population_2010 as Population_in_2010, round((crimes*1.0/nbh.Population_2010)*100,4)+ "%" as Percentage
ORDER BY Percentage DESC

//16_Query_9
MATCH(a:Homicide{Crime_ID:103550044091}) 
MATCH (b:Beat)<--(c:Homicide) -->(n:Neighborhood) 
WHERE c.Crime_ID <> a.Crime_ID
WITH  c, point.distance(a.location,c.location) as Distance, n, b
RETURN c.Crime_ID as Crime_ID, Distance, c.Date as Date, n.Neighborhood as Neighborhood, b.Beat as Beat
ORDER BY Distance

//17_Data_Science_1_Set_Property
MATCH (n:Crime) - [:occured_in] -> (nbh:Neighborhood)
WHERE nbh.Population_2010 <> 0
WITH nbh, count(*) as crimes
SET nbh.number_of_crimes = crimes
RETURN nbh

//17_Data_Science_1_Projection
CALL gds.graph.project(
    'myCrime',
    {
        Neighborhood:{
            properties:["Population_2010","number_of_crimes"]
        }
    },
    '*'
);

//17_Data_Science_1_Algorithm
MATCH(n:Neighborhood) WHERE n.Population_2010 > 0 
with Collect (n) AS filtered_nbh
CALL gds.alpha.knn.filtered.stream ("myCrime",{
    topK: 1,
    nodeProperties: ['Population_2010','number_of_crimes'],
    sourceNodeFilter: filtered_nbh,randomSeed: 1337,concurrency: 1,sampleRate : 1.0,
    deltaThreshold: 0.0
})
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).Neighborhood as Nbh1, gds.util.asNode(node2).Neighborhood as Nbh2,similarity
ORDER BY similarity DESCENDING, Nbh1, Nbh2


//18_Data_Science_2_Set_Property
MATCH (c:Crime)
WITH apoc.coll.sort(collect(distinct (c.Crime_Type))) as crime_types
UNWIND crime_types as ccc
WITH ccc
MATCH (n:Neighborhood) 
WITH apoc.coll.sort(collect(distinct (n.Neighborhood))) as Neighborhoods , ccc
UNWIND Neighborhoods as nnn
WITH ccc,nnn
OPTIONAL MATCH (c1:Crime {Crime_Type:ccc}) --> (n:Neighborhood{Neighborhood:nnn})
WITH toFloat(count(c1)) as result, ccc, nnn
WITH collect (result) as results, nnn 
MATCH (nbh:Neighborhood{Neighborhood:nnn})
SET nbh.crime_count_by_crime_type = results
RETURN nbh

//18_Data_Science_2_Project
CALL gds.graph.project(
    'myCrime_3',
    {
        Neighborhood:{
            properties:["Population_2010","crime_count_by_crime_type"]
        }
    },
    '*'
);

//18_Data_Science_2_Algorithm
MATCH  (n:Neighborhood) WHERE n.number_of_crimes > 10
with  (n) AS filtered_nbh
CALL gds.alpha.knn.filtered.stream ("myCrime_3",{
    topK: 1,
    nodeProperties: [
         {crime_count_by_crime_type:"EUCLIDEAN"}
    ],
    sourceNodeFilter: filtered_nbh,randomSeed: 1337,concurrency: 1,sampleRate : 1.0,
    deltaThreshold: 0.0
})
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).Neighborhood as Nbh1, gds.util.asNode(node2).Neighborhood as Nbh2,similarity
ORDER BY similarity DESCENDING, Nbh1, Nbh2


